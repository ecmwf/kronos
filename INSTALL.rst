=================
Installing Kronos
=================


Kronos Executor
---------------

The Kronos Executor is part of the Kronos package. It reads a schedule file KSchedule
(possibly generated by the Kronos Modeller component) and executes the schedule on a HPC system for
benchmarking purposes. Here below step-by-step guide for installing the executor is provided.

1. **Get and install ``conda`` from sources (if not available on the system):**

  The easiest way to install the required python dependencies is using the *conda* package
  management system. If this is not available in your system it may be installed in a local
  directory as follows::

    wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh
    sh Miniconda2-latest-Linux-x86_64.sh -b -p ${working_directory}/miniconda
    unset PYTHONPATH
    export PATH=${working_directory}/miniconda/bin:${PATH}

2. **Get Kronos sources**::

    cd {working_directory}
    git clone https://github.com/ecmwf/kronos-core

3. **Create conda environment for executor**::

    cd kronos-core
    conda env create -n executor -f kronos_executor/conda_env_executor.yml

4. **Install Kronos Executor**::

    source activate executor
    cd kronos_executor
    pip install -e .

  At this stage, Kronos-Executor should be installed under the “executor” conda environment and all
  the appropriate environment settings should be automatically detected. It is possible to verify
  the correct installation of the Kronos-Executor by running::

      source activate executor
      conda env export

  The name of kronos=<version> should now appear in the list of packages available in the executor
  environment.

5. **Install the Synthetic Apps**

  This step installs the synthetic apps in the HPC system. Building the executable requires:

    1. A working C compiler

    2. A working installation of MPI

    3. CMake (version 2.8.11 or higher)

    4. ecBuild (version 2 or higher, https://github.com/ecmwf/ecbuild)

    5. POSIX 2004 system

  To build the synthetic app executable (named kronos-synapp), create a build directory outside the
  source tree::

    mkdir {kronos-build}
    cd {kronos-build}
    <path-to-ecbuild-source>/bin/ecbuild <path-to-kronos-source>
    make

If the synthetic apps are successfully installed, an executor called "kronos-synapp" is generated
in {kronos-build}/bin

