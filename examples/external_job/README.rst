
External job example
====================

This example mimics a workflow with a producer running a loop and outputting
some data at every iteration. At the end of each iteration, the producer sends a
notification to Kronos indicating that a step is ready to be processed. Then,
Kronos can schedule the associated consumer job.

The producer is an external job, which means it needs its own job script to be
submitted to the scheduler. The consumer jobs use the synthetic application and
read from the files generated by the producer.

Setup
-----

In order to make this example work, some setup is needed:

1. Configure Kronos the usual way
2. Update the job class in ``stepper_job.py``
   a) Choose a template and associated mixin depending on your scheduling system
      (or create one if needed)
   b) Make sure the Job class inherits from the appropriate mixin
3. Provide a script to load the Kronos conda environment, ``environment.sh``
4. Generate a KSchedule using the helper script::

      python generate_kschedule.py <number of steps>

Running the workflow
--------------------

Once the workflow has been generated, it can be executed just like simple
synthetic application workflows::

   kronos-executor -c <config file> <kschedule>

