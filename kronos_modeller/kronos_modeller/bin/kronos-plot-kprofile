#!/usr/bin/env python
# (C) Copyright 1996-2018 ECMWF.
# 
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0. 
# In applying this licence, ECMWF does not waive the privileges and immunities 
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

"""

============================================================================
       **DEVELOPMENT TOOL** - USAGE OF THIS TOOL IS UNSUPPORTED
============================================================================

Kronos tool to plot the data time-series contained in a KProfile file

"""

import argparse
import sys

import numpy as np
from kronos.kronos_executor.io import ProfileFormat
from kronos.kronos_modeller.plot_handler import PlotHandler
from kronos.kronos_modeller.time_signal.definitions import time_signal_names
from kronos.kronos_modeller.workload_data import WorkloadDataGroup

from kronos_modeller.jobs import ModelJob

if __name__ == "__main__":

    # Parser for the required arguments
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("path_unmodelled_kprofile", help="path of KProfile file of un-modelled data to over-plot")
    parser.add_argument("-b", "--nbins", help="path of KProfile file of un-modelled data to over-plot", default=2000)
    parser.add_argument("-xn", "--xmin", help="min x-limit")
    parser.add_argument("-xm", "--xmax", help="max x-limit")

    # print the help if no arguments are passed
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # parse the arguments..
    args = parser.parse_args()

    import matplotlib.pyplot as plt
    from matplotlib.pyplot import cm

    # check number of unique labels in KProfile and create a group only if it contains less than 10 labels
    kprofile_data = ProfileFormat.from_filename(args.path_unmodelled_kprofile)
    label_set = set(j["label"] for j in kprofile_data.profiled_jobs)

    labelled_jobs = {}
    if len(label_set) <= 10:
        for job in kprofile_data.profiled_jobs:
            model_job = ModelJob.from_json(job)
            labelled_jobs.setdefault(job["label"], [model_job]).append(model_job)
    else:
        print "too many labels in KProfile data (>10). I'm not plotting.."
        sys.exit(1)

    wl_orig_group = WorkloadDataGroup.from_labelled_jobs(labelled_jobs)

    max_running_jobs_orig = wl_orig_group.max_running_jobs
    vals_max_orig = wl_orig_group.max_timeseries(n_bins=args.nbins)
    vals_sum_orig = wl_orig_group.sum_timeseries
    t_0 = wl_orig_group.min_start_time
    t_1 = t_0 + wl_orig_group.total_duration

    if not args.xmin:
        xmin = t_0

    if not args.xmax:
        xmax = t_1

    import matplotlib.pyplot as plt
    from matplotlib.pyplot import cm

    plt_hdl = PlotHandler()
    color = iter(cm.rainbow(np.linspace(0, 1, len(wl_orig_group.tags))))
    n_plots = len(time_signal_names) + 1
    fig_size = (18, 3 * n_plots)
    plt.figure(plt_hdl.get_fig_handle_ID(), figsize=fig_size)
    id_plot = 0

    # plot_info collects plotting info during the iterations, to allow bar over-plotting..
    plot_info = []

    cum_model_vals = {}
    for ll, label in enumerate(wl_orig_group.tags):

        print "label: {}".format(label)

        # ------- retrieve jobs fro the original workload.. ------
        kprofile_workload_orig = wl_orig_group.get_workload_by_name(label)
        time_stamps_orig, n_running_vec_orig = kprofile_workload_orig.running_jobs
        time_stamps_orig_plot = (time_stamps_orig-t_0) / 3600.
        # --------------------------------------------------------

        # ------------------ plots ----------------------------
        line_color = next(color)
        id_plot = 1
        plt.subplot(n_plots, 1, id_plot)
        plt.subplots_adjust(left=0.2, right=0.8, top=0.9, bottom=0.1)
        plt.plot(time_stamps_orig_plot, n_running_vec_orig, color=line_color, linestyle='-', label=label)
        plt.ylabel('#jobs')
        plt.xlim(xmin=args.xmin, xmax=args.xmax)
        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.title("KProfile metrics")

        # plot of the total time-signals
        total_metrics_original = kprofile_workload_orig.total_metrics_timesignals

        # print "metrics {}".format(total_metrics_original.keys())

        dx_bin = 1.0/float(args.nbins)

        for tt, ts_name in enumerate(time_signal_names):
            id_plot += 1
            plt.subplot(n_plots, 1, id_plot)
            plt.subplots_adjust(left=0.2, right=0.8, top=0.95, bottom=0.05)

            # if ll == 0:
            if ts_name in total_metrics_original.keys():
                ts = total_metrics_original[ts_name]
                time_stamps_orig, vals_orig = ts.digitized(args.nbins)
                time_stamps_orig_plot = (time_stamps_orig-t_0) / 3600.
                plt.plot(time_stamps_orig_plot, vals_orig, color=line_color)

            plt.ylabel(ts_name)
            plt.xlim(xmin=args.xmin, xmax=args.xmax)

            # set x-axes labels and ticks as appropriate
            if tt == len(time_signal_names)-1:
                plt.xlabel('time [Hrs]')
            else:
                plt.tick_params(axis='x', which='both', bottom='off', top='off', labelbottom='off')

    plt.show()
