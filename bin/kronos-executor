#!/usr/bin/env python

# (C) Copyright 1996-2017 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

"""

============================================================================
Usage:
    kronos-executor <config> <schedule>

Config must be in JSON format. Schedule must be a KSchedule file output by Kronos
============================================================================

"""

import argparse
import json
import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from kronos.executor.executor import Executor
from kronos.io.schedule_format import ScheduleFormat


if __name__ == "__main__":

    # read other arguments if present..
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('kschedule_file_name', type=str, help="Name of KSchedule file containing the schedule")
    parser.add_argument('-c', "--config", help="Executor config file (read README.rst for info)")

    # print the help if no arguments are passed
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # parse the arguments..
    args = parser.parse_args()

    if not os.path.exists(args.kschedule_file_name):
        raise ValueError("file {} does not exist!".format(args.kschedule_file_name))

    if not args.config:
        raise ValueError("Configuration file not set! choose --config=<path-to-config-file>".format(args.config))

    if args.config:
        if not os.path.exists(args.config):
            raise ValueError("config file {} does not exist!".format(args.config))

    print "Configuration JSON: {}".format(args.kschedule_file_name)
    print "Schedule (KSchedule): {}".format(args.config)

    with open(args.config, 'r') as f:
        config = json.load(f)

    with open(args.kschedule_file_name, 'r') as f:
        schedule = ScheduleFormat.from_file(f)

    Executor(config, schedule, kschedule_file=args.kschedule_file_name).run()
