# (C) Copyright 1996-2017 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

"""
show info of a KSF file
"""

import argparse
import numpy as np

from kronos.core.time_signal import time_signal_names, signal_types
from kronos.io.schedule_format import ScheduleFormat

if __name__ == "__main__":

    # Parser for the required arguments
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--ksf", type=str, help="File name of KSF of the corresponding kronos run")
    args = parser.parse_args()

    ksf_data = ScheduleFormat.from_filename(args.ksf)

    # get KSF data and print them
    tot_metrics = {k: np.asarray([]) for k in time_signal_names}
    tot_metrics["n_mkdir"] = np.asarray([])


    n_proc_vec = np.asarray([synth_app["num_procs"] for synth_app in ksf_data.synapp_data])

    for synth_app in ksf_data.synapp_data:
        for frame in synth_app["frames"]:

            for ker in frame:

                if ker["name"] == "cpu":
                    tot_metrics["flops"] = np.append(tot_metrics["flops"], signal_types["flops"]["type"](ker["flops"]))

                elif ker["name"] == "file-read":
                    tot_metrics["kb_read"] = np.append(tot_metrics["kb_read"], signal_types["kb_read"]["type"](ker["kb_read"]))
                    tot_metrics["n_read"] = np.append(tot_metrics["n_read"], signal_types["n_read"]["type"](ker["n_read"]))

                elif ker["name"] == "file-write":
                    tot_metrics["kb_write"] = np.append(tot_metrics["kb_write"], signal_types["kb_write"]["type"](ker["kb_write"]))
                    tot_metrics["n_write"] = np.append(tot_metrics["n_write"], signal_types["n_write"]["type"](ker["n_write"]))

                elif ker["name"] == "mpi":
                    tot_metrics["n_pairwise"] = np.append(tot_metrics["n_pairwise"], signal_types["n_pairwise"]["type"](ker["n_pairwise"]))
                    tot_metrics["kb_pairwise"] = np.append(tot_metrics["kb_pairwise"], signal_types["kb_pairwise"]["type"](ker["kb_pairwise"]))
                    tot_metrics["n_collective"] = np.append(tot_metrics["n_collective"], signal_types["n_collective"]["type"](ker["n_collective"]))
                    tot_metrics["kb_collective"] = np.append(tot_metrics["kb_collective"], signal_types["kb_collective"]["type"](ker["kb_collective"]))

                # ------------ additional kernels --------
                elif ker["name"] == "fs_metadata":
                    tot_metrics["n_mkdir"] = np.append(tot_metrics["n_mkdir"], int(ker["n_mkdir"]))

                else:
                    raise("kernel name {} not recognized!".format(ker["name"]))

    # print summary
    print "\n======================= job stats ==========================\n"
    _str = "       qty       |"
    _str += "           sum          |"
    _str += "           min          |"
    _str += "           max          |"
    _str += "           std          |"
    print _str

    if n_proc_vec.size:
        print "{:17s}{:>25s}{:>25d}{:>25d}{:>25f}".format("Nprocs",
                                                          "N/A",
                                                          np.min(n_proc_vec),
                                                          np.max(n_proc_vec),
                                                          np.std(n_proc_vec))
    else:
        print "{:17s}{:>25s}{:>25s}{:>25s}{:>25s}".format("Nprocs",
                                                          "N/A",
                                                          " vector empty!",
                                                          " vector empty!",
                                                          " vector empty!")

    print "\n==================== metrics stats =========================\n"
    _str = "   metric name   |"
    _str += "           sum          |"
    _str += "           min          |"
    _str += "           max          |"
    _str += "           std          |"
    print _str
    for k in time_signal_names:

        if tot_metrics[k].size:
            unit = signal_types[k]["print_info"]["unit"]
            form = signal_types[k]["print_info"]["format"]
            conv = signal_types[k]["print_info"]["conv"]
            str_format = "%-17s:"
            str_format += form + " [" + unit + "]"
            str_format += form + " [" + unit + "]"
            str_format += form + " [" + unit + "]"
            str_format += form + " [" + unit + "]"
            print str_format % (k, np.sum(tot_metrics[k]) * conv,
                                np.min(tot_metrics[k]) * conv,
                                np.max(tot_metrics[k]) * conv,
                                np.std(tot_metrics[k]) * conv)
        else:
            print "{:17s}{:>25s}{:>25s}{:>25s}{:>25s}".format(k,
                                                              " vector empty!",
                                                              " vector empty!",
                                                              " vector empty!",
                                                              " vector empty!")
