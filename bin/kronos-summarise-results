#!/usr/bin/env python
# (C) Copyright 1996-2017 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

"""

Tool that generates a summary of a Kronos run. It shows the rates of the
kernel operations (CPU/MPI/IO) on a per-job class basis.

"""

import argparse
import os
import sys

from kronos.io.format_data_handlers.kresults_job import kresults_stats_info
from kronos.io.format_data_handlers.kresults_data import KResultsData

job_classes = {
               "ini_serial": "main/fc/inigroup/*/serial",
               "ini_parallel": "main/fc/inigroup/*/parallel",
               "getini_leg_parallel": "main/fc/ensemble/cf/control/legA/getiniLeg/*parallel",
               "chunk0_parallel": "main/fc/ensemble/cf/control/legA/chunk0/*parallel",
               "ensamble_cf_serial": "main/fc/ensemble/cf/*/serial",
               "ensamble_pf_serial": "main/fc/ensemble/pf/*/serial",
               "ensamble_pf_getinileg_serial": "main/fc/ensemble/pf/*/legA/getiniLeg/*parallel",
               "ensamble_pf_modelepsnemo_parallel": "main/fc/ensemble/pf/*/legA/chunk0/modeleps_nemo/*parallel",
               "ensemble_logfiles_serial": "main/fc/ensemble/logfiles/*serial",
               "main_lag_serial": "main/fc/lag/*serial"
              }


def print_formatted_class_stats(class_name, per_class_job_stats):

    # Show summary per class
    _fl = 20
    n_fields = 3

    # get the stats for this class (if present..)
    class_stats = per_class_job_stats.get(class_name)

    if class_stats:

        # Class name
        print "\n\n{}".format("-" * (_fl + 1) * n_fields)
        print "{:^{l}s}|".format("class: " + class_name, l=(_fl + 1) * n_fields - 1)
        print "{}".format("-" * (_fl + 1) * n_fields)

        # Header
        print "{:<{l}s}|{:^{l}s}|{:^{l}s}|".format("Name", "Total [G/GiB]", "Total Time", l=_fl)
        print "{}".format("-" * (_fl + 1) * n_fields)

        # Print the relevant metrics for each stats class
        for k, v in class_stats.iteritems():

            stats_metric_info = kresults_stats_info[k]

            # retrieve the relevant info from the metric type
            counter_to_print = v[stats_metric_info["label_metric"]]
            conv_fact = stats_metric_info["conv"]
            elaps_time = v["elapsed"]

            print "{:<{l}s}|{:>{l}}|{:>{l}}|".format(k, counter_to_print * conv_fact, elaps_time, l=_fl)

        print "{}".format("-" * (_fl + 1) * n_fields)
    else:
        print "\n\n*** Warning ***: no jobs found for class {}".format(class_name)


if __name__ == "__main__":

    # Parser for the required arguments
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument("job_dir",
                        type=str,
                        help="Path of the kronos output folder 'job_dir' (path that contains job-<ID> sub-folders..)")

    parser.add_argument("--permissive",
                        help="If set, it skips the check on the number of successful jobs",
                        action='store_true')

    parser.add_argument("--rdx1_classes",
                        help="If set, uses the classes pre-defined for the rdx1 benchmark",
                        action='store_true')

    parser.add_argument("--show_jobs",
                        help="If set, shows which class each job falls into",
                        action='store_true')

    # print the help if no arguments are passed
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # parse the arguments..
    args = parser.parse_args()

    # check that the run path exists
    if not os.path.exists(args.job_dir):
        print "Specified run path does not exist: {}".format(args.job_dir)
        sys.exit(1)

    # check that the run path contains the job sub-folders
    job_dirs = [x for x in os.listdir(args.job_dir) if os.path.isdir(os.path.join(args.job_dir, x)) and "job-" in x]
    if not job_dirs:
        print "Specified path does not contain any job folder (<job-ID>..)!"
        sys.exit(1)

    # set the job_classes
    job_classes = job_classes if args.rdx1_classes else {}

    # read simulation data
    simulation_tag = "kronos-sim"
    sim_data = KResultsData.read_from_sim_paths(args.job_dir,
                                                simulation_tag,
                                                permissive=args.permissive)

    # print some info on the classification of the jobs in the simulation (if requested)
    sim_data.print_job_classes_info(job_classes, args.show_jobs if args.show_jobs else False)

    # job statistics per class..
    per_class_job_stats = sim_data.class_stats_sums(job_classes)

    # ///////////////////// print summary ////////////////////////
    print "{:<52s}".format("\n\nPERFORMANCE SUMMARY:\n")

    # overall runtime
    print "Total Runtime [s]: {:20.2f}".format(sim_data.runtime())

    # loop over all the classes found (including "generic_class")
    for class_name in per_class_job_stats.keys():
        if class_name != "all_classes" and class_name != "generic_class":
            print_formatted_class_stats(class_name, per_class_job_stats)

    # print stats for the generic class
    print_formatted_class_stats("generic_class", per_class_job_stats)

    # print stats for the generic class
    print_formatted_class_stats("all_classes", per_class_job_stats)
