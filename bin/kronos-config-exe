#!/usr/bin/env python
# (C) Copyright 1996-2017 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.


import sys
from kronos.io.schema_description import SchemaDescription

exe_config_schema = {
  "$schema": "http://json-schema.org/draft-04/schema",
  "type": "object",
  "title": "Kronos Executor configuration file format",
  "description": "The Kronos-Executor configuration file format controls the execution of the Executor",
  "additionalProperties": False,
  "properties": {
    "coordinator_binary": {
      "type": "string",
      "description": "Path to the synthetic apps executable (kronos-coordinator)"
    },
    "dir_output": {
      "type": "string",
      "description": "Working output folder"
    },
    "job_class": {
      "type": "array",
      "description": "Name of the submit script template that the executor uses (see kronos/executor/job_classes)",
      "items": {
        "type": "string"
      }
    },
    "job_dir_shared": {
      "type": "string",
      "description": "Shared working output folder"
    },
    "procs_per_node": {
      "type": "integer",
      "description": "Number of processors per node. N_requested_nodes = Ncpu_synth_app / [procs_per_node]"
    },
    "read_cache": {
      "type": "string",
      "description": "Folder containing files to be read by the synthetic apps. (files are automatically generated)"
    },
    "submission_workers": {
      "type": "integer",
      "description": "Number of processing submitting jobs (to avoid submission lag due to system submit time)"
    }
  }
}


if __name__ == '__main__':

    """
    Function to print executor config schema
    TODO: add validation check
    """

    # If no arguments are supplied, print the schema in a human readable form. Otherwise treat the
    # arguments as files to be validated against the schema.
    if len(sys.argv) == 1:
        print SchemaDescription.from_schema(exe_config_schema)
    else:
        print "unknown argument!"
        sys.exit(-1)