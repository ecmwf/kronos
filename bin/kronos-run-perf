#!/usr/bin/env python
# (C) Copyright 1996-2017 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

import os
import argparse
import sys

# Hard-coded job classes
from kronos.core.post_process.sim_data import SimulationData

job_classes = {
               "ini_serial": "main/fc/inigroup/*/serial",
               "ini_parallel": "main/fc/inigroup/*/parallel",
               "getini_leg_parallel": "main/fc/ensemble/cf/control/legA/getiniLeg/*parallel",
               "chunk0_parallel": "main/fc/ensemble/cf/control/legA/chunk0/*parallel",
               "ensamble_cf_serial": "main/fc/ensemble/cf/*/serial",
               "ensamble_pf_serial": "main/fc/ensemble/pf/*/serial",
               "ensamble_pf_getinileg_serial": "main/fc/ensemble/pf/*/legA/getiniLeg/*parallel",
               "ensamble_pf_modelepsnemo_parallel": "main/fc/ensemble/pf/*/legA/chunk0/modeleps_nemo/*parallel",
               "ensemble_logfiles_serial": "main/fc/ensemble/logfiles/*serial",
               "main_lag_serial": "main/fc/lag/*serial"
              }

if __name__ == "__main__":

    # Parser for the required arguments
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("job_dir",
                        type=str,
                        help="Path of the kronos output folder 'job_dir' (contains the job-<ID> sub-folders)")
    args = parser.parse_args()

    # check that the run path exists
    if not os.path.exists(args.job_dir):
        print "Specified run path does not exist: {}".format(args.job_dir)
        sys.exit(-1)

    # check that the run path contains the job sub-folders
    job_dirs = [x for x in os.listdir(args.job_dir) if os.path.isdir(os.path.join(args.job_dir, x)) and "job-" in x]
    if not job_dirs:
        print "Specified path does not contain any job folder (<job-ID>..)!"
        sys.exit(-1)

    # read simulation data
    simulation_tag = "kronos-sim"
    sim_data = SimulationData.read_from_sim_paths(args.job_dir, simulation_tag)

    # print some info on the classification of the jobs in the simulation
    sim_data.print_job_classes_info(job_classes)

    # job statistics per class..
    per_class_job_stats = sim_data.class_stats_sums(job_classes)

    # ///////////////////// print summary ////////////////////////
    print "{:<52s}".format("\n\nPERFORMANCE SUMMARY:\n")

    # overall runtime
    print "Total Runtime [s]: {:20.2f}".format(sim_data.runtime())

    # Show summary per class
    for class_name in job_classes.keys():

        class_stats = per_class_job_stats[class_name]

        _fl = 20
        n_fields = 3

        # Class name
        print "\n\n{}".format("-"*(_fl+1)*n_fields)
        print "{:^{l}s}|".format(" - "+class_name, l=(_fl + 1) * n_fields-1)
        print "{}".format("-" * (_fl + 1) * n_fields)

        # Header
        print "{:<{l}s}|{:^{l}s}|{:^{l}s}|".format("Name", "Total [G/GiB]", "Total Time", l=_fl)
        print "{}".format("-" * (_fl + 1) * n_fields)

        # Print the metrics
        for k,v in class_stats.iteritems():
            print "{:<{l}s}|{:>{l}}|{:>{l}}|".format(k,
                                                     v["count"],
                                                     v["elapsed"], l=_fl)

        print "{}".format("-" * (_fl + 1) * n_fields)
