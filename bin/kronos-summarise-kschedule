#!/usr/bin/env python
# (C) Copyright 1996-2017 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

"""

Tool to show information of a kronos schedule file (KSchedule)

"""

import argparse

import sys

from kronos.core.time_signal.definitions import time_signal_names, signal_types
from kronos.shared_tools.shared_utils import mean_of_list, std_of_list
from kronos.io.format_data_handlers.kresults_kernel_work import KernelStats, KernelWorkDistribution
from kronos.io.schedule_format import ScheduleFormat


class file_info(object):

    metrics_names = time_signal_names

    def __init__(self, jobs_data):

        # Collect all the metrics names to display..
        self.tot_metrics = {k: [] for k in self.metrics_names}

        self.jobs_data = jobs_data

    def n_apps(self):
        return -1

    def get_tot_metrics(self):
        pass


class kschedule_info(file_info):

    metrics_names = time_signal_names + ["n_mkdir"]

    def __init__(self, jobs_data):

        super(kschedule_info, self).__init__(jobs_data)

    def n_procs(self):
        return [app["num_procs"] for app in self.jobs_data]

    def start_delay(self):
        return [app["start_delay"] for app in self.jobs_data]

    def get_tot_metrics(self):
        """
        Return the dictionary with the metrics totals..
        :return:
        """

        for synth_app in self.jobs_data:

            app_metrics = {k: [] for k in self.metrics_names}

            for frame in synth_app["frames"]:

                for ker in frame:

                    if ker["name"] == "cpu":
                        app_metrics["flops"].append(signal_types["flops"]["type"](ker["flops"]))

                    elif ker["name"] == "file-read":
                        app_metrics["kb_read"].append(signal_types["kb_read"]["type"](ker["kb_read"]))
                        app_metrics["n_read"].append(signal_types["n_read"]["type"](ker["n_read"]))

                    elif ker["name"] == "file-write":
                        app_metrics["kb_write"].append(signal_types["kb_write"]["type"](ker["kb_write"]))
                        app_metrics["n_write"].append(signal_types["n_write"]["type"](ker["n_write"]))

                    elif ker["name"] == "mpi":
                        app_metrics["n_pairwise"].append(signal_types["n_pairwise"]["type"](ker["n_pairwise"])*synth_app["num_procs"])
                        app_metrics["kb_pairwise"].append(signal_types["kb_pairwise"]["type"](ker["kb_pairwise"])*synth_app["num_procs"])
                        app_metrics["n_collective"].append(signal_types["n_collective"]["type"](ker["n_collective"])*synth_app["num_procs"])
                        app_metrics["kb_collective"].append(signal_types["kb_collective"]["type"](ker["kb_collective"])*synth_app["num_procs"])

                    # --------- additional kernels --------
                    elif ker["name"] == "fs_metadata":
                        app_metrics["n_mkdir"].append(int(ker["n_mkdir"]))

                    else:
                        raise ("kernel name {} not recognized!".format(ker["name"]))

            # append synth app sums into totals
            for k in app_metrics.keys():

                # append only non-empty metrics
                if app_metrics[k]:
                    self.tot_metrics[k].append(sum(app_metrics[k]))

        return self.tot_metrics

    def calculate_per_process_kernel_data(self):
        """
        Returns a structure with added per-process kernel data
        :return:
        """

        kernel_distributor = KernelWorkDistribution(self.jobs_data)
        return kernel_distributor.calculate_per_process_kernel_data()


def print_qty_header():
    """
    Print a header
    :return:
    """
    _str = ""
    _str += "-" * 143
    _str += "\n"
    _str += "       qty        |"
    _str += "           sum          |"
    _str += "           avg          |"
    _str += "           min          |"
    _str += "           max          |"
    _str += "           std         |"
    _str += "\n"
    _str += "-" * 143
    return _str


def print_one_liner_qty(qty_vec, qty_name):
    """
    Print one-line quantities
    :param qty_vec:
    :param qty_name:
    :return:
    """
    _str = ""

    if qty_vec:
        _str += "{:17s}:{:>25s}{:>25.2f}{:>25.0f}{:>25.0f}{:>25.2f}".format(qty_name,
                                                                            "N/A",
                                                                            mean_of_list(qty_vec),
                                                                            min(qty_vec),
                                                                            max(qty_vec),
                                                                            std_of_list(qty_vec)
                                                                            )
    else:
        _str += "{:17s}:{:>25s}{:>25s}{:>25s}{:>25s}{:>25s}".format(qty_name,
                                                                    "N/A",
                                                                    "vector empty!",
                                                                    "vector empty!",
                                                                    "vector empty!",
                                                                    "vector empty!"
                                                                    )
    return _str


def print_metrics(tot_metrics):
    """
    Print tot of metrics
    :param tot_metrics:
    :return:
    """

    _str = ""

    for name in time_signal_names:

        if tot_metrics[name]:
            unit = signal_types[name]["print_info"]["unit"]
            form = signal_types[name]["print_info"]["format"]
            conv = signal_types[name]["print_info"]["conv"]
            str_format = "%-17s:"
            str_format += form + " [" + unit + "]"
            str_format += form + " [" + unit + "]"
            str_format += form + " [" + unit + "]"
            str_format += form + " [" + unit + "]"
            str_format += form + " [" + unit + "]"
            _str += str_format % (name,
                                sum(tot_metrics[name]) * conv,
                                mean_of_list(tot_metrics[name]) * conv,
                                min(tot_metrics[name]) * conv,
                                max(tot_metrics[name]) * conv,
                                std_of_list(tot_metrics[name]) * conv)
        else:
            _str += "{:17s}:{:>25s}{:>25s}{:>25s}{:>25s}{:>25s}".format(name,
                                                                        "vector empty!",
                                                                        "vector empty!",
                                                                        "vector empty!",
                                                                        "vector empty!",
                                                                        "vector empty!"
                                                                        )
        _str += "\n"

    return _str


if __name__ == "__main__":

    # Parser for the required arguments
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("kschedule", type=str, help="Name of KSchedule file to inspect")

    # print the help if no arguments are passed
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # parse the arguments..
    args = parser.parse_args()

    # info = factory(args)
    info = kschedule_info(ScheduleFormat.from_filename(args.kschedule).synapp_data)
    kernel_data = info.calculate_per_process_kernel_data()

    n_proc_vec = info.n_procs()
    start_delay_vec = info.start_delay()
    tot_metrics = info.get_tot_metrics()

    # print summary
    print "\nSUMMARY:"
    print "N apps: {}".format(len(info.jobs_data))

    print "\nJOB STATS:"
    print print_qty_header()
    print print_one_liner_qty(n_proc_vec, "Nprocs")
    print print_one_liner_qty(start_delay_vec, "start_delay")

    print "\nMETRICS:"
    print print_qty_header()
    print print_metrics(tot_metrics)

    print "\nHISTOGRAMS:"

    _ff=15

    flops_histograms = KernelStats(kernel_data).calculate_flops_histograms(n_bins=5)
    if flops_histograms:
        print "\n{:{_ff}} [FLOPS]".format("flops".upper(), _ff=_ff)
        KernelStats.print_histogram(*flops_histograms, format_len=_ff)

    mpi_col_histograms = KernelStats(kernel_data).calculate_mpi_col_histograms(n_bins=5)
    if mpi_col_histograms:
        print "\n{:{_ff}} [KiB/call]".format("mpi_collective".upper(), _ff=_ff)
        KernelStats.print_histogram(*mpi_col_histograms, format_len=_ff)

    mpi_p2p_histograms = KernelStats(kernel_data).calculate_mpi_p2p_histograms(n_bins=5)
    if mpi_p2p_histograms:
        print "\n{:{_ff}} [KiB/call]".format("mpi_point2point".upper(), _ff=_ff)
        KernelStats.print_histogram(*mpi_p2p_histograms, format_len=_ff)

    print "\n..done"
