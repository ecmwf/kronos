#!/usr/bin/env python
# (C) Copyright 1996-2017 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

"""

Tool to show information of a kronos schedule file (KSchedule)
Examples of usage:

 > kronos-summarise-kschedule dummy.kschedule --list
   (lists all jobs in the KSF)

 - kronos-summarise-kschedule dummy.kschedule -f=*serial --list
   (lists all jobs whose label matches the glob expression *serial)

 - kronos-summarise-kschedule dummy.kschedule -f=*serial --summary=job --metrics kb_write flops
   (prints statistics (aggregated per "job") of all jobs whose label matches the ...
   glob expression *serial - for metrics "kb_write" and "flops")

 - kronos-summarise-kschedule dummy.kschedule -f=*serial --summary=kernel --metrics kb_write flops
   (prints statistics (aggregated per "kernel") of all jobs whose label matches the ...
   glob expression *serial - for metrics "kb_write" and "flops")

"""

import sys
import argparse

from kronos.core.time_signal.definitions import signal_types
from kronos.io.format_data_handlers.kschedule_data import KScheduleData
from kronos.io.format_data_handlers.kschedule_summary import kschedule_summary_handlers


if __name__ == "__main__":

    # Parser for the required arguments
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("kschedule", type=str, help="Name of KSchedule file to inspect")

    # filter jobs to be either listed or summarised
    parser.add_argument("-f", "--filter",
                        type=str,
                        help="Only jobs with label matcheing this glob are included")

    # choose what to do (either list or summarise jobs)
    parser_group = parser.add_mutually_exclusive_group(required=True)
    parser_group.add_argument("-l", "--list",
                              help="Full list of job names (labels)",
                              action='store_true')

    parser_group.add_argument('-s', "--summary",
                              help="Show summary information",
                              choices=kschedule_summary_handlers.keys(),
                              type=str)

    parser.add_argument("-m", "--metrics",
                        choices=signal_types.keys()+["all"],
                        nargs='*')

    parser.add_argument("-b", "--nbins",
                        type=int,
                        help="Nbins for distributions")

    # print the help if no arguments are passed
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # parse the arguments..
    args = parser.parse_args()

    # some checks:
    if args.summary and not args.metrics:
        raise RuntimeError("summary specified but metric name missing!")

    if args.list and args.metrics:
        raise RuntimeError("metrics option valid only for 'summary'!")

    if args.list and args.nbins:
        raise RuntimeError("bins option valid only for 'summary'!")

    # get the data from the schedule..
    kschedule_data = KScheduleData.from_filename(args.kschedule)

    if args.list:

        job_names = kschedule_data.list_job_names(regex=args.filter)
        # print "\nFOUND {} JOBS".format(len(job_names))
        print "\n".join(job_names)

    elif args.summary:

        # get the full list of metrics to test (considering the all case)
        metrics_to_test = [user_metric for user_metric in args.metrics if user_metric.lower() != "all"]
        if "all" in args.metrics:
            metrics_to_test += signal_types.keys()

        for i_param in metrics_to_test:
            kschedule_summary_handlers[args.summary](kschedule_data, i_param,
                                                     job_match_re=args.filter,
                                                     n_bins=args.nbins if args.nbins else 10).get_summary()
