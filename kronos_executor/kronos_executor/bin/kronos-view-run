#!/usr/bin/env python

# (C) Copyright 1996-2018 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

"""

Tool that generates an overview of a run by analysing the following 2 files of the run:

  - <kschedule-file>.kschedule
  - kronos-executor.log

NOTE: the 2 file must belong to the same run. (i.e. the kronos-executor.log should be the log
file generated by kronos when running the <kschedule file>)

"""

import os
import sys
import argparse
from datetime import datetime

from kronos_executor.io_formats.format_data_handlers.kschedule_data import KScheduleData
from kronos_executor.tools import datetime2epochs


class LoggedJob(object):

    """
    Minimal class for logged jobs
    """

    def __init__(self):

        self.jid = None
        self.job_name = None
        self.wlname = None
        self.depends = []
        self.t_sub = None
        self.t_end = None

    @property
    def get_time_diff_end_sub(self):
        return datetime2epochs(self.t_end) - datetime2epochs(self.t_sub)


def parse_kronos_logs(raw_lines):
    """
    simple parser of Kronos-logs
    :param raw_lines:
    :return:
    """

    job_sub_comp = {}
    for ll, line in enumerate(raw_lines):

        # print "line #: ", ll

        if "Submitted job:" in line:
            jid = int(line.split("Submitted job:")[1])
            time_sub_raw = line.split("Proc Time: ")[1].split(" (ep: ")[0]
            time_sub = datetime.strptime(time_sub_raw, '%Y-%m-%d %H:%M:%S.%f')
            job_sub_comp.setdefault(jid, {})["t_sub"] = time_sub

            # print "got job: ", jid
            # print "got time SUB: ", time_sub

        if "Complete; job:" in line:
            jid = int(line.split("Complete; job:")[1])
            time_end_raw = line.split()[0] + " " + line.split()[1]
            time_end_raw_clean = time_end_raw.replace(",", ".").replace(";", "")
            time_end = datetime.strptime(time_end_raw_clean, '%Y-%m-%d %H:%M:%S.%f')

            # print "got job: ", jid
            # print "got time END: ", time_end

            job_sub_comp.setdefault(jid, {})["t_end"] = time_end

    return job_sub_comp


def print_all_logged_jobs(_jobs):

    # print all job-wise info to stdout (CSV format)
    print "{}, {}, {}, {}, {}, {}".format("jid",
                                          "name",
                                          "dep's",
                                          "t_sub",
                                          "t_end",
                                          "t_end - t_sub [sec]")

    for j in sorted(_jobs, key=lambda j: j.jid):
        print "{:5}, {:15}, {:10}, {:25}, {:25}, {:10.2f}".format(j.jid,
                                                                  j.wlname,
                                                                  "; ".join([str(d) for d in j.depends]),
                                                                  str(j.t_sub),
                                                                  str(j.t_end),
                                                                  j.get_time_diff_end_sub
                                                                  )


if __name__ == "__main__":

    # Parser for the required arguments
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("kschedule", type=str, help="Name of the KSchedule file to analyse")
    parser.add_argument("executor_log", type=str, help="Name of the kronos-executor log file"
                                                       "(typically kronos-executor.log)")

    # print the help if no arguments are passed
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # parse the arguments..
    args = parser.parse_args()

    if not os.path.isfile(args.kschedule):
        print "Specified kschedule file does not exist: {}".format(args.kschedule)
        sys.exit(1)

    if not os.path.isfile(args.executor_log):
        print "Specified executor log file does not exist: {}".format(args.executor_log)
        sys.exit(1)

    # Get the data from the schedule..
    kschedule_data = KScheduleData.from_filename(args.kschedule)

    # Start filling up the list of logged jobs
    logged_jobs = []
    for jj, ksjob in enumerate(kschedule_data.synapp_data):

        lj = LoggedJob()

        lj.jid = jj
        lj.job_name = ksjob["metadata"]["job_name"]
        lj.wlname = ksjob["metadata"]["workload_name"]
        lj.depends = [d["info"]["job"] for d in ksjob["depends"]]

        # print "lj.jid ", lj.jid
        # print "lj.depends ", lj.depends

        logged_jobs.append(lj)

    # get submission and end time from kronos-log
    with open(args.executor_log) as f:
        log_lines = f.readlines()

    # parse the logs
    job_sub_end = parse_kronos_logs(log_lines)

    # combine all job information together..
    for lj in logged_jobs:
        lj.t_sub = job_sub_end[lj.jid]["t_sub"]
        lj.t_end = job_sub_end[lj.jid]["t_end"]

    # print all to stdout (CSV format)
    print_all_logged_jobs(logged_jobs)
